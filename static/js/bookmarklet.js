// Generated by CoffeeScript 1.4.0

/*
Subtle Patterns Bookmarklet

This is the main bookmarklet overlay the user sees and controls.
*/


(function() {
  var ElementSelector, SubtlePatternsBookmarklet,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  SubtlePatternsBookmarklet = (function() {

    function SubtlePatternsBookmarklet() {
      this.update_selector = __bind(this.update_selector, this);

      this.category_patterns = __bind(this.category_patterns, this);

      this.update = __bind(this.update, this);

    }

    SubtlePatternsBookmarklet.prototype.setup = function(kwargs) {
      var i, pattern, _i, _len, _ref;
      if (kwargs == null) {
        kwargs = {};
      }
      /*
              Handle initial setup outside of constructor
      */

      this.patterns = kwargs.patterns || [];
      this.parent = kwargs.parent || "body";
      this.selector = $(kwargs.selector || "body");
      this.events = kwargs.events || {};
      this.original_background = this.selector.css("background-image");
      this.curr = kwargs.curr || 0;
      this.klass = kwargs.klass || "";
      this.create();
      this.setup_categories();
      this.setup_events();
      if (kwargs["default"]) {
        _ref = this.patterns;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          pattern = _ref[i];
          if (pattern.title === kwargs["default"]) {
            this.curr = i;
          }
        }
      }
      this.update();
      if (this.events.finished_setup) {
        return this.events.finished_setup();
      }
    };

    SubtlePatternsBookmarklet.prototype.show = function() {
      return this.el.show();
    };

    SubtlePatternsBookmarklet.prototype.hide = function() {
      return this.el.hide();
    };

    SubtlePatternsBookmarklet.prototype.create = function() {
      /*
              Create the bookmarklet for the first time
      */
      this.el = $("<div id=\"subtlepatterns_bookmarklet\" class=\"" + this.klass + "\">\n    <div class=\"wrapper\">\n        <span class=\"title\">\n            <a href=\"#\" target=\"_blank\" class=\"name\"></a>\n        </span>\n        <div class=\"controls\">\n            <a href=\"javascript:void(0)\" class=\"previous\"><img src=\"http://bradjasper.com/subtle-patterns-bookmarklet/static/img/left_arrow.png\" /></a>\n            <span class=\"counter\">\n                <span class=\"curr\"></span>/<span class=\"total\"></span>\n            </span>\n            <a href=\"javascript:void(0)\" class=\"next\"><img src=\"http://bradjasper.com/subtle-patterns-bookmarklet/static/img/right_arrow.png\" /></a>\n        </div>\n        <div class=\"categories\">\n            <select class=\"category\">\n                <option value=\"all\">All (" + this.patterns.length + ")</option>\n            </select>\n        </div>\n        <div class=\"about\">\n            <a href=\"http://subtlepatterns.com/?utm_source=SubtlePatternsBookmarklet&utm_medium=web&utm_campaign=SubtlePatternsBookmarklet\" target=\"_blank\">SubtlePatterns</a> bookmarklet by\n            <a href=\"http://bradjasper.com/?utm_source=SubtlePatternsBookmarklet&utm_medium=web&utm_campaign=SubtlePatternsBookmarklet\" target=\"_blank\">Brad Jasper</a>\n       </div>\n       <a href=\"javascript:void(0)\" class=\"change_selector\">Change Selector</a>\n    </div>\n    <img class=\"preload\" style=\"display: none;\" />\n</div>");
      return this.el.hide().appendTo(this.parent).slideDown();
    };

    SubtlePatternsBookmarklet.prototype.current_pattern = function() {
      /*
              Return the currently selected pattern
      */
      return this.category_patterns()[this.curr];
    };

    SubtlePatternsBookmarklet.prototype.update = function() {
      /*
              Update the UI to reflect a change in behavior. This is generally called on first
              initialization and any time a next() or previous() call is made.
      */

      var description, pattern, pattern_link;
      if (this.events.before_update) {
        this.events.before_update();
      }
      pattern = this.current_pattern();
      this.selector.css("background-image", "url('" + pattern.mirror_image + "')");
      this.selector.css("background-repeat", "repeat");
      this.el.find(".curr").html("" + (this.curr + 1));
      this.el.find(".total").html("" + (this.category_patterns().length));
      pattern_link = "" + pattern.link + "?utm_source=SubtlePatternsBookmarklet&utm_medium=web&utm_campaign=SubtlePatternsBookmarklet";
      description = "" + pattern.description + " (" + (pattern.categories.join('/')) + ")";
      this.el.find(".title .name").attr("href", pattern_link).attr("title", description).html(pattern.title);
      if (this.events.after_update) {
        return this.events.after_update();
      }
    };

    SubtlePatternsBookmarklet.prototype.preload = function(index) {
      var image;
      image = this.category_patterns()[index].mirror_image;
      return this.el.find("img.preload").attr("src", image);
    };

    SubtlePatternsBookmarklet.prototype.category_patterns = function() {
      /*
              Return all of the patterns for the active category
      */

      var pattern, _i, _len, _ref, _ref1, _results;
      _ref = this.patterns;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        if (this.category === "all" || (_ref1 = this.category, __indexOf.call(pattern.categories, _ref1) >= 0)) {
          _results.push(pattern);
        }
      }
      return _results;
    };

    SubtlePatternsBookmarklet.prototype.setup_categories = function() {
      /*
              Build the category <select> box
      */

      var category, count, key, pattern, select, sortable, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      this.categories = {};
      this.category = "all";
      _ref = this.patterns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        _ref1 = pattern.categories;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          category = _ref1[_j];
          if (category in this.categories) {
            this.categories[category] += 1;
          } else {
            this.categories[category] = 1;
          }
        }
      }
      sortable = (function() {
        var _ref2, _results;
        _ref2 = this.categories;
        _results = [];
        for (key in _ref2) {
          val = _ref2[key];
          _results.push([key, val]);
        }
        return _results;
      }).call(this);
      sortable.sort(function(b, a) {
        return a[1] - b[1];
      });
      select = this.el.find("select");
      _results = [];
      for (_k = 0, _len2 = sortable.length; _k < _len2; _k++) {
        _ref2 = sortable[_k], category = _ref2[0], count = _ref2[1];
        _results.push(select.append("<option value='" + category + "'>" + category + " (" + count + ")</option>"));
      }
      return _results;
    };

    SubtlePatternsBookmarklet.prototype.setup_events = function() {
      /*
              Setup event handlers for all different actions
      */

      var _this = this;
      $(document).keydown(function(e) {
        switch (e.keyCode) {
          case 37:
            return _this.previous();
          case 39:
            return _this.next();
        }
      });
      this.el.find(".previous").click(function(e) {
        e.preventDefault();
        return _this.previous();
      });
      this.el.find(".next").click(function(e) {
        e.preventDefault();
        return _this.next();
      });
      this.el.find("select").change(function() {
        _this.category = _this.el.find("select").val();
        _this.curr = 0;
        return _this.update();
      });
      return this.el.find(".change_selector").click(function(e) {
        var pattern, selector;
        e.preventDefault();
        pattern = _this.current_pattern();
        selector = new ElementSelector({
          over: function(e) {
            var target;
            console.log(e.target);
            target = $(e.target);
            return target.attr("border-styles", target.css("border") || "none").css("border", "3px dashed #666");
          },
          out: function(e) {
            var target;
            target = $(e.target);
            return target.css("border", "0px solid #000");
          },
          click: function(e) {
            var target;
            e.preventDefault();
            target = $(e.target);
            target.css("border", target.attr("border-styles"));
            selector.stop();
            selector.out(e);
            return _this.update_selector(target);
          }
        });
        return selector.start();
      });
    };

    SubtlePatternsBookmarklet.prototype.update_selector = function(selector) {
      if (this.events.before_change_selector) {
        this.events.before_change_selector();
      }
      this.selector.css("background-image", this.original_background);
      this.selector = selector;
      this.original_background = this.selector.css("background-image");
      if (this.events.after_change_selector) {
        this.events.after_change_selector();
      }
      return this.update();
    };

    SubtlePatternsBookmarklet.prototype.next_index = function() {
      if (this.curr < this.category_patterns().length - 1) {
        return this.curr + 1;
      }
      return 0;
    };

    SubtlePatternsBookmarklet.prototype.previous_index = function() {
      if (this.curr > 0) {
        return this.curr - 1;
      }
      return this.category_patterns().length - 1;
    };

    SubtlePatternsBookmarklet.prototype.next = function() {
      /*
              Switch to the next pattern
      */
      this.curr = this.next_index();
      this.update();
      return this.preload(this.next_index());
    };

    SubtlePatternsBookmarklet.prototype.previous = function() {
      /*
              Switch to the previous pattern
      */
      this.curr = this.previous_index();
      this.update();
      return this.preload(this.previous_index());
    };

    return SubtlePatternsBookmarklet;

  })();

  ElementSelector = (function() {

    function ElementSelector(kwargs) {
      var _this = this;
      if (kwargs == null) {
        kwargs = {};
      }
      this.stop = __bind(this.stop, this);

      this.keyup = __bind(this.keyup, this);

      this.start = __bind(this.start, this);

      this.over = kwargs.over || function(e) {};
      this.out = kwargs.out || function(e) {};
      this.click = kwargs.click || function(e) {};
      this._over = function(e) {
        _this.target = e;
        return _this.over(e);
      };
      this._out = function(e) {
        _this.target = null;
        return _this.out(e);
      };
    }

    ElementSelector.prototype.start = function() {
      document.addEventListener("click", this.click, true);
      document.addEventListener("keyup", this.keyup, true);
      document.addEventListener("mouseout", this._out, true);
      return document.addEventListener("mouseover", this._over, true);
    };

    ElementSelector.prototype.keyup = function(e) {
      if (e.keyCode === 27) {
        this.stop();
        if (this.target) {
          return this._out(this.target);
        }
      }
    };

    ElementSelector.prototype.stop = function() {
      document.removeEventListener("mouseover", this._over, true);
      document.removeEventListener("mouseout", this._out, true);
      document.removeEventListener("click", this.click, true);
      return document.removeEventListener("keyup", this.keyup, true);
    };

    return ElementSelector;

  })();

  window.SubtlePatternsBookmarklet = SubtlePatternsBookmarklet;

}).call(this);
